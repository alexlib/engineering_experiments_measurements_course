Traceback (most recent call last):
  File "/home/user/Documents/repos/engineering_experiments_measurements_course/.conda/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/user/Documents/repos/engineering_experiments_measurements_course/.conda/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/Documents/repos/engineering_experiments_measurements_course/.conda/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/Documents/repos/engineering_experiments_measurements_course/.conda/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/user/Documents/repos/engineering_experiments_measurements_course/.conda/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/user/Documents/repos/engineering_experiments_measurements_course/.conda/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/user/Documents/repos/engineering_experiments_measurements_course/.conda/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# what are the recommended number of bins, see wikipedia 

# for short samples
print(f" for short samples: {np.int(1 + 3.3*np.log10(len(t)))}")
print(f" another rule {np.int(1.87*(len(t)-1)**(0.4))}")


# for long samples
print(f" for long samples: {np.int(2*len(t)**(0.33))}")
print(f" for very long ones: {np.int(np.sqrt(len(t)))}")
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[8], line 4[0m
[1;32m      1[0m [38;5;66;03m# what are the recommended number of bins, see wikipedia [39;00m
[1;32m      2[0m 
[1;32m      3[0m [38;5;66;03m# for short samples[39;00m
[0;32m----> 4[0m [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124m for short samples: [39m[38;5;132;01m{[39;00m[43mnp[49m[38;5;241;43m.[39;49m[43mint[49m([38;5;241m1[39m[38;5;250m [39m[38;5;241m+[39m[38;5;250m [39m[38;5;241m3.3[39m[38;5;241m*[39mnp[38;5;241m.[39mlog10([38;5;28mlen[39m(t)))[38;5;132;01m}[39;00m[38;5;124m"[39m)
[1;32m      5[0m [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124m another rule [39m[38;5;132;01m{[39;00mnp[38;5;241m.[39mint([38;5;241m1.87[39m[38;5;241m*[39m([38;5;28mlen[39m(t)[38;5;241m-[39m[38;5;241m1[39m)[38;5;241m*[39m[38;5;241m*[39m([38;5;241m0.4[39m))[38;5;132;01m}[39;00m[38;5;124m"[39m)
[1;32m      8[0m [38;5;66;03m# for long samples[39;00m

File [0;32m~/Documents/repos/engineering_experiments_measurements_course/.conda/lib/python3.12/site-packages/numpy/__init__.py:397[0m, in [0;36m__getattr__[0;34m(attr)[0m
[1;32m    392[0m     warnings[38;5;241m.[39mwarn(
[1;32m    393[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mIn the future `np.[39m[38;5;132;01m{[39;00mattr[38;5;132;01m}[39;00m[38;5;124m` will be defined as the [39m[38;5;124m"[39m
[1;32m    394[0m         [38;5;124m"[39m[38;5;124mcorresponding NumPy scalar.[39m[38;5;124m"[39m, [38;5;167;01mFutureWarning[39;00m, stacklevel[38;5;241m=[39m[38;5;241m2[39m)
[1;32m    396[0m [38;5;28;01mif[39;00m attr [38;5;129;01min[39;00m __former_attrs__:
[0;32m--> 397[0m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(__former_attrs__[attr], name[38;5;241m=[39m[38;5;28;01mNone[39;00m)
[1;32m    399[0m [38;5;28;01mif[39;00m attr [38;5;129;01min[39;00m __expired_attributes__:
[1;32m    400[0m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(
[1;32m    401[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124m`np.[39m[38;5;132;01m{[39;00mattr[38;5;132;01m}[39;00m[38;5;124m` was removed in the NumPy 2.0 release. [39m[38;5;124m"[39m
[1;32m    402[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m__expired_attributes__[attr][38;5;132;01m}[39;00m[38;5;124m"[39m,
[1;32m    403[0m         name[38;5;241m=[39m[38;5;28;01mNone[39;00m
[1;32m    404[0m     )

[0;31mAttributeError[0m: module 'numpy' has no attribute 'int'.
`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations

